var fs = require('fs');
import Log from "../src/Util";
import {expect} from 'chai';
import InsightFacade from "../src/controller/InsightFacade";
import {InsightResponse} from "../src/controller/IInsightFacade";
import path = require('path');
import TestUtil from "./TestUtil";
import QueryRequest from "../src/controller/QueryController";

describe("InsightFacade", function () {

    var zipFileContents: string = null;
    var facade: InsightFacade = null;
    before(function () {
        Log.info('InsightController::before() - start');
        zipFileContents = new Buffer(fs.readFileSync(path.join(__dirname, '../../cpsc310d1public_team30/310courses.1.0.zip'))).toString('base64');
        try {
            var files = fs.readdirSync(path.join(__dirname, '../src/controller/data/'));
            for (var file of files) {
                fs.unlinkSync(path.join(__dirname, '../src/controller/data/'+file));
            }
            fs.rmdirSync(path.join(__dirname, '../src/controller/data/'));
        } catch (err) {
            // silently fail, but don't crash; this is fine
            Log.warn('InsightController::before() - files not removed (probably not present)');
        }
        Log.info('InsightController::before() - done');
    });

    beforeEach(function () {
        facade = new InsightFacade();
    });

    it("Should be able to process query generated by UI", function () {
        this.timeout(3000);
        var that = this;
        Log.trace("Starting test: " + that.test.title);
        var queryRequest = {"GET":
            ["courses_dept","courses_id","numsections","maxattended","courses_instructor",
                "courses_title","courses_pass","courses_fail","courses_avg","courses_year"],
            "WHERE":{"AND":[{"GT":{"courses_pass":2}},
                {"LT":{"courses_fail":5}},
                {"EQ":{"courses_year":2014}},
                {"LT":{"courses_avg":90}},
                {"IS":{"courses_id":"210"}},
                {"IS":{"courses_dept":"CPSC"}}]},
            "GROUP":["courses_dept","courses_id","courses_instructor",
                "courses_title","courses_pass","courses_fail","courses_avg","courses_year"],
            "APPLY":[{"numsections":{"COUNT":"courses_uuid"}},
                {"maxattended":{"MAX":"courses_attended"}}],"AS":"TABLE"};
        return facade.performQuery(queryRequest).then(function (response: InsightResponse) {
            expect.fail();
        }).catch(function (response: InsightResponse) {
            expect(response.code).to.equal(200);
        });
    });


    it("Should be able to add a new dataset (204)", function () {
        this.timeout(5000);
        var that = this;
        Log.trace("Starting test: " + that.test.title);
        return facade.addDataset('courses', zipFileContents).then(function (response: InsightResponse) {
            expect(response.code).to.equal(204);
        }).catch(function (response: InsightResponse) {
            expect.fail('Should not happen');
        });
    });

    it("Should be able to update an existing dataset (201)", function () {
        this.timeout(3000);
        var that = this;
        Log.trace("Starting test: " + that.test.title);
        return facade.addDataset('courses', zipFileContents).then(function (response: InsightResponse) {
            expect(response.code).to.equal(201);
        }).catch(function (response: InsightResponse) {
            expect.fail('Should not happen');
        });
    });

    it("Should not be able to add an invalid dataset (400)", function () {
        this.timeout(3000);
        var that = this;
        Log.trace("Starting test: " + that.test.title);
        return facade.addDataset('courses', 'some random bytes').then(function (response: InsightResponse) {
            expect.fail();
        }).catch(function (response: InsightResponse) {
            expect(response.code).to.equal(400);
        });
    });

    it("Should not perform query on not previously PUT dataset", function () {
        this.timeout(3000);
        var that = this;
        Log.trace("Starting test: " + that.test.title);
        var queryRequest = {
            "GET": ["course_dept", "courses_avg"],
            "WHERE": {},
            "ORDER": "courses_avg",
            "AS": "TABLE"
        };
        return facade.performQuery(queryRequest).then(function (response: InsightResponse) {
            expect.fail();
        }).catch(function (response: InsightResponse) {
            expect(response.code).to.equal(424);
        });
    });

    it("Should not perform query on not previously PUT dataset", function () {
        this.timeout(3000);
        var that = this;
        Log.trace("Starting test: " + that.test.title);
        var queryRequest = {
            "GET": ["course_dept", "courses_avg"],
            "WHERE": {},
            "ORDER": "courses_avg",
            "AS": "TABLE"
        };
        return facade.performQuery(queryRequest).then(function (response: InsightResponse) {
            expect.fail();
        }).catch(function (response: InsightResponse) {
            expect(response.code).to.equal(424);
        });
    });

    it("Should not perform query on not previously PUT dataset referenced in deep where", function () {
        this.timeout(3000);
        var that = this;
        Log.trace("Starting test: " + that.test.title);
        var queryRequest = {
            "GET": ["courses_dept", "courses_avg"],
            "WHERE": {
                "GT": {
                    "course_avg": 90
                }
            },
            "ORDER": "courses_avg",
            "AS": "TABLE"
        };
        return facade.performQuery(queryRequest).then(function (response: InsightResponse) {
            expect.fail();
        }).catch(function (response: InsightResponse) {
            expect(response.code).to.equal(424);
        });
    });

    it("Should not perform query on not valid key", function () {
        this.timeout(3000);
        var that = this;
        Log.trace("Starting test: " + that.test.title);
        var queryRequest = {
            "GET": ["courses_dept", "courses_avg"],
            "WHERE": {
                "GT": {
                    "courses_WRONG": 90
                }
            },
            "ORDER": "courses_avg",
            "AS": "TABLE"
        };
        return facade.performQuery(queryRequest).then(function (response: InsightResponse) {
            expect.fail();
        }).catch(function (response: InsightResponse) {
            expect(response.code).to.equal(400);
        });
    });

    it("Should not be able to add a dataset with empty id (400)", function () {
        this.timeout(3000);
        var that = this;
        Log.trace("Starting test: " + that.test.title);
        return facade.addDataset('', zipFileContents).then(function (response: InsightResponse) {
            expect.fail();
        }).catch(function (response: InsightResponse) {
            expect(response.code).to.equal(400);
        });
    });

    it("Should be able to find sections with an average > 90 (200)", function () {
        this.timeout(3000);
        var that = this;
        Log.trace("Starting test: " + that.test.title);
        var queryRequest = {"GET": ["courses_dept", "courses_avg"], "WHERE" : { "GT" : {"courses_avg" : 90} }, "ORDER" : "courses_avg", "AS" : "TABLE"};
        return facade.performQuery(queryRequest).then(function (response: InsightResponse) {
            expect(response.code).to.equal(200);
        }).catch(function (response: InsightResponse) {
            expect.fail();
        });
    });

    it("Should be able to find all sections (200)", function () {
        this.timeout(3000);
        var that = this;
        Log.trace("Starting test: " + that.test.title);
        var queryRequest = {"GET": ["courses_dept", "courses_avg"], "WHERE" : {}, "ORDER" : "courses_avg", "AS" : "TABLE"};
        return facade.performQuery(queryRequest).then(function (response: InsightResponse) {
            expect(response.code).to.equal(200);
        }).catch(function (response: InsightResponse) {
            expect.fail();
        });
    });

    it("Find the average for all cpsc courses. (200)", function () {
        this.timeout(3000);
        var that = this;
        Log.trace("Starting test: " + that.test.title);
        var queryRequest = {
            "GET": ["courses_id", "courseAverage"],
            "WHERE": {"IS": {"courses_dept": "cpsc"}} ,
            "GROUP": [ "courses_id" ],
            "APPLY": [ {"courseAverage": {"AVG": "courses_avg"}} ],
            "ORDER": { "dir": "UP", "keys": ["courseAverage", "courses_id"]},
            "AS":"TABLE"
        };
        return facade.performQuery(queryRequest).then(function (response: InsightResponse) {
            expect(response.code).to.equal(200);
        }).catch(function (response: InsightResponse) {
            expect.fail();
        });
    });

    it("Find the average for all courses in the university, sort up (hardest to easiest). (200)", function () {
        this.timeout(3000);
        var that = this;
        Log.trace("Starting test: " + that.test.title);
        var queryRequest = {
            "GET": ["courses_dept", "courses_id", "courseAverage", "maxFail"],
            "WHERE": {},
            "GROUP": [ "courses_dept", "courses_id" ],
            "APPLY": [ {"courseAverage": {"AVG": "courses_avg"}}, {"maxFail": {"MAX": "courses_fail"}} ],
            "ORDER": { "dir": "UP", "keys": ["courseAverage", "maxFail", "courses_dept", "courses_id"]},
            "AS":"TABLE"
        };
        return facade.performQuery(queryRequest).then(function (response: InsightResponse) {
            expect(response.code).to.equal(200);
        }).catch(function (response: InsightResponse) {
            expect.fail();
        });
    });

    it("Find the courses offered the most times. (200)", function () {
        this.timeout(3000);
        var that = this;
        Log.trace("Starting test: " + that.test.title);
        var queryRequest = {
            "GET": ["courses_dept", "courses_id", "numSections"],
            "WHERE": {},
            "GROUP": [ "courses_dept", "courses_id" ],
            "APPLY": [ {"numSections": {"COUNT": "courses_uuid"}} ],
            "ORDER": { "dir": "UP", "keys": ["numSections", "courses_dept", "courses_id"]},
            "AS":"TABLE"
        }
        return facade.performQuery(queryRequest).then(function (response: InsightResponse) {
            expect(response.code).to.equal(200);
        }).catch(function (response: InsightResponse) {
            expect.fail();
        });
    });

    it("For each 4th and 5th year course from a department starting with c, return the min number of fail and the max number of audit, grouped by course number and department. (200)", function () {
        this.timeout(3000);
        var that = this;
        Log.trace("Starting test: " + that.test.title);
        var queryRequest = {"GET": ["courses_dept", "courses_id", "minFail", "maxAudit"],
         "WHERE" : { "AND": [{ "OR" : [ {"IS": {"courses_id" : "4*"}} , {"IS" : {"courses_id" : "5*"}} ] }, {"IS" : {"courses_dept" : "c*"}}] },
         "GROUP": ["courses_dept", "courses_id"],
         "APPLY": [{"minFail": {"MIN": "courses_fail"}},{"maxAudit" : {"MAX": "courses_audit"}}],
         "AS" : "TABLE"};
        return facade.performQuery(queryRequest).then(function (response: InsightResponse) {
            expect(response.code).to.equal(200);
        }).catch(function (response: InsightResponse) {
            expect.fail();
        });
    });
    it("Find average of all cpsc classes, compare result returned", function () {
        this.timeout(3000);
        var that = this;
        Log.trace("Starting test: " + that.test.title);
        let file = fs.readFileSync("./test/results/q1.json");
        var expectedResult:any = TestUtil.generateResultJSON("q1.json");
        var queryRequest = {"GET": ["courses_id", "courseAverage"],
            "WHERE": {"IS": {"courses_dept": "cpsc"}} ,
            "GROUP": [ "courses_id" ],
            "APPLY": [ {"courseAverage": {"AVG": "courses_avg"}} ],
            "ORDER": { "dir": "UP", "keys": ["courseAverage", "courses_id"]},
            "AS":"TABLE"};
        return facade.performQuery(queryRequest).then(function (response: InsightResponse) {

            var jsonresp:any = response;
            var respvalue = jsonresp.body["result"];
            var sameOutput = TestUtil.compareJSONArrays(respvalue, expectedResult.result, null);
            expect(sameOutput).to.be.true;
            expect(response.code).to.equal(200);

        }).catch(function (response: InsightResponse) {
            expect.fail();
        });
    });
    it("Find the average for all courses in the university, sort up (hardest to easiest), compare result returned", function () {
        this.timeout(3000);
        var that = this;
        Log.trace("Starting test: " + that.test.title);
        var expectedResult:any = TestUtil.generateResultJSON("q2.json");
        var queryRequest = { "GET": ["courses_dept", "courses_id", "courseAverage", "maxFail"],
            "WHERE": {},
            "GROUP": [ "courses_dept", "courses_id" ],
            "APPLY": [ {"courseAverage": {"AVG": "courses_avg"}}, {"maxFail": {"MAX": "courses_fail"}} ],
            "ORDER": { "dir": "UP", "keys": ["courseAverage", "maxFail", "courses_dept", "courses_id"]},
            "AS":"TABLE"};
        return facade.performQuery(queryRequest).then(function (response: InsightResponse) {

            var jsonresp:any = response;
            var respvalue = jsonresp.body["result"];
            var sameOutput = TestUtil.compareJSONArrays(respvalue, expectedResult.result, null);
            expect(sameOutput).to.be.true;
            expect(response.code).to.equal(200);

        }).catch(function (response: InsightResponse) {
            expect.fail();
        });
    });

    it("Should pass", function () {
        this.timeout(3000);
        var that = this;
        Log.trace("Starting test: " + that.test.title);
        var queryRequest = {"GET": ["courses_dept", "average"], "WHERE" : { "GT" : {"courses_avg" : 90} }, "ORDER" : "average2", "GROUP": ["courses_dept", "courses_id"], "APPLY": [{"average2": {"AVG": "courses_avg"}},{"average": {"AVG": "courses_avg"}}], "AS" : "TABLE"};
        return facade.performQuery(queryRequest).then(function (response: InsightResponse) {
            expect(response.code).to.equal(200);
        }).catch(function (response: InsightResponse) {
            expect.fail();
        });
    });
        it("Should fail, because it is and invalid query", function () {
            this.timeout(3000);
            var that = this;
            Log.trace("Starting test: " + that.test.title);
            var queryRequest:any = undefined;
            return facade.performQuery(queryRequest).then(function (response: InsightResponse) {
                expect.fail();
            }).catch(function (response: InsightResponse) {
                expect(response.code).to.equal(400);
            });
        });

    it("Should fail, because GROUP is without APPLY (400).", function () {
        this.timeout(3000);
        var that = this;
        Log.trace("Starting test: " + that.test.title);
        var queryRequest = {"GET": ["courses_dept", "courses_avg"], "WHERE" : {}, "ORDER" : "courses_avg", "GROUP": ["courses_avg"], "AS" : "TABLE"};
        return facade.performQuery(queryRequest).then(function (response: InsightResponse) {
            expect.fail();
        }).catch(function (response: InsightResponse) {
            expect(response.code).to.equal(400);
        });
    });
    it("Should not be able to query when key that appears in GROUP or APPLY appears in the other", function () {
        this.timeout(3000);
        var that = this;
        Log.trace("Starting test: " + that.test.title);
        var queryRequest = {"GET": ["courses_id"],
            "WHERE": {"IS": {"courses_dept": "cpsc"}} ,
            "GROUP": [ "courses_id" ],
            "APPLY": [ {"courses_id": {"AVG": "courses_avg"}} ],
            "AS":"TABLE"};
        return facade.performQuery(queryRequest).then(function (response: InsightResponse) {
            expect.fail();
        }).catch(function (response: InsightResponse) {
            Log.trace(JSON.stringify(response.body));
            expect(response.code).to.equal(400);
        });
    });

    it("Should fail, because APPLY is without GROUP (400).", function () {
        this.timeout(3000);
        var that = this;
        Log.trace("Starting test: " + that.test.title);
        var queryRequest = {"GET": ["courses_dept", "courses_avg"], "WHERE" : {}, "ORDER" : "courses_avg", "APPLY": [{"minFail": {"MIN": "courses_fail"}},{"maxAudit" : {"MAX": "courses_audit"}}], "AS" : "TABLE"};
        return facade.performQuery(queryRequest).then(function (response: InsightResponse) {
            expect.fail();
        }).catch(function (response: InsightResponse) {
            expect(response.code).to.equal(400);
        });
    });

    it("Should be able to remove an existing dataset (204)", function () {
        this.timeout(3000);
        var that = this;
        Log.trace("Starting test: " + that.test.title);
        return facade.removeDataset('courses').then(function (response: InsightResponse) {
            expect(response.code).to.equal(204);
        }).catch(function (response: InsightResponse) {
            expect.fail();
        });
    });

    it("Should not be able to remove an existing dataset (404)", function () {
        this.timeout(3000);
        var that = this;
        Log.trace("Starting test: " + that.test.title);
        return facade.removeDataset('courses').then(function (response: InsightResponse) {
            expect.fail();
        }).catch(function (response: InsightResponse) {
            expect(response.code).to.equal(404);
        });
    });




});
